#include <iostream>
#include <cmath>
using namespace std;
 
bool ok(int q[], int c, int n) {
    for (int i = 0; i < c; i++)
        // if col difference == row difference, bishop c and i are diagonal to each other
        // row # = q[...] % n
        // col # = q[...] / n
        if(abs((q[c]%n) - (q[i]%n)) == abs((q[c]/n) - (q[i]/n))){
        	return false;
		}
    return true;
}
 
int kBishops(int n, int k) {
    // dynamic allocate an array in heap base on k (num of bishops)
    // ...
    int *q = new int[k];
 
    // place first bishop at first (top-left) box
    // ...
    q[0] = 0;
 
    int c = 0, solutions = 0;
 
    // Similar Backtracking Algorithm
    while (c >= 0) {    // NEXT BISHOP
        c++; 
        if (c >= k) {   // if all the bishop has been put onto the broad
            // increment solution count
            solutions++;
            // backtrack
            c--;
        }
        else 
            // start from the position of the previous bishop to avoid duplicate solutions
            // ...
            q[c] = q[c-1];
            
 
        while (c >= 0) {    // NEXT SQUARE
        	q[c]++;
            if (q[c] >= n*n) // If all the squares have been tried (passed the bottom-right square) for the bishop
                // backtrack
                c--;
            else
                // check if it's ok to put the bishop on this sqaure...
                //...
				if(ok(q, c, n)){
                	break;
				}
        }
    }
    // free up the memory in heap
    delete []q;
    return solutions; 
}
 
int main() {
    // Declare n and k.
 	int n, k;
    // keep asking user input for n and k.
    while(true){
    	cout << "Enter n " << endl;
    	cin >> n;
    	if(n == -1) return 0;
    	cout << "Enter k " << endl;
    	cin >> k;
    	while(k > n || k < 1){
    		cout << "Must be less than n and greater than 0" << endl;
    		cin >> k;
		}
		cout << "Solutions "<< kBishops(n, k) << endl;
	}
    // n >= k
    // if user input -1 for n, terminate the loop.
    // otherwise call the kBishop(n, k) function to get the number of solutions.
    return 0;
}
