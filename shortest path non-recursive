#include <iostream>
#include <string>
using namespace std;
 
const int rows = 5, cols = 6;
 
void calculateCosts() {
    static int weight[rows][cols] = { {3,4,1,2,8,6},
                                      {6,1,8,2,7,4},
                                      {5,9,3,9,9,5},
                                      {8,4,1,3,2,6},
                                      {3,7,2,8,6,4} };
 
    // Initialize the cost matrix and path matrix.
    int cost[rows][cols] = {};
    string path[rows][cols] = {};
 
    // fill out the leftmost column of cost matrix and path matrix (row number) 
    for (int i = 0; i < rows; i++) {
        cost[i][0] = weight[i][0];
        path[i][0] = to_string(i);
    }
 
    // fill out the rest of the cost and path matrix
    // finish all the rows in one column and then go to next column just like 8 queens, 
    // so column is the outer loop, row is the inner loop.
    for (int j = 1; j < cols; j++) {
        for (int i = 0; i < rows; i++) {
            // calculate costs of adjacent squares left-up, left and left-down
 			int up = cost[(i-1+5)%5][j-1];
 			int left = cost[i][j-1];
 			int down = cost[(i+1)%5][j-1];
            // find the minimum from left-up, left and left-down
            // ...
 			int minimum = min(min(cost[(i-1+5)%5][j-1], cost[i][j-1]), cost[(i+1)%5][j-1]);
            // update the cost matrix: cost[i][j] = weight[..][..] + minimum
            // ...
 			cost[i][j] = weight[i][j] + minimum;
            // update the path matrix:
            // if minCost == left, path[i][j] = path[i][left] + to_string(j);
            // else if minCost == left-up , path[i][j] = path[up][left] + to_string(j);
            // else ...
            if(minimum == up) path[i][j] = path[(i-1+5)%5][j-1] + to_string(i);
            if(minimum == left) path[i][j] = path[(i)%5][j-1] + to_string(i);
            if(minimum == down) path[i][j] = path[(i+1)%5][j-1] + to_string(i);
        }
    }
 
    int minRow = 0;
    // check your rightmost column of the cost matrix and see which row has the minimum cost.
 	for(int i = 0; i < rows; i++){
 		if(cost[i][cols-1] < cost[minRow][cols-1]){
 			minRow = i;
		 }
	 }
    cout << "The length of the shortest path is " << cost[minRow][cols - 1];
    cout << ".\nThe rows of the path from left to right are " << path[minRow][cols - 1] << ".";
}
 
int main() {
    calculateCosts();
    return 0;
}

