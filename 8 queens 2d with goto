#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	
	//8 Queens 2D with Goto - Backtracking Algorithm:


    //Initialize board q[8][8] to 0;
    //Place the first Queen at q[0][0] (1st row, 1st col)
 int q[8][8] = {}; int r, c= 0;
 int solution = 0;
 q[0][0] = 1;

nextCol:
    //Move to the next column
    c++;
    //If passed the last column, ie find a solution, goto print
    if(c>7) goto print;
    //(Otherwise,) reset row to -1 (before the first row)
	r = -1;

nextRow:
    //Move to the next row
    r++;
    //If passed the end of the column, ie cannot place a queen on that column, goto backtrack
	if(r>7) goto backtrack;
    //If there is a queen in the same row, goto nextRow
    for(int i = 0; i<c; i++){
    	if(q[r][i] == 1) goto nextRow;
	}
    //If there is a queen in the same upper-left diagonal, goto nextRow
    for(int i = 0; (r-i>=0) && (c-i >= 0); i++){
    	if(q[r-i][c-i] == 1) goto nextRow;
	}
	
    //If there is a queen in the same lower-left diagonal, goto nextRow
    for(int i = 1; (r+i<8) && (c-i >= 0); i++){
    	if(q[r+i][c-i] == 1) goto nextRow;
	}
    //(Write an ok function to check the above 3 cases in programs without goto)
    
    
    
    //Place a queen in the current q[row][col]
   	q[r][c] = 1;
    goto nextCol;

backtrack:
    //Move to the previous column
    c--;
    //If column is -1, (out of board, no more solution can be found), exit the program
    if(c<0) return 0;
    //Locate the position (row number) of the queen in that column
    for(r= 0; r<8; r++){
    	if(q[r][c] == 1) break;
	}

    //Remove the queen
    q[r][c] = 0;
    goto nextRow;

print:
    //Print the solution counter
   	cout << "Solution: " << ++solution << endl;
    //Write a nested loop to print the solution
    for(int i = 0; i < 8; i++){
    	for(int j = 0; j< 8; j++){
    		cout<< q[i][j];
		} cout << endl;
	}
    
    goto backtrack;
	

}
